# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/service_container.html
# Default parameters
parameters:
    app_name: Shopkeeper
    app_version: '4.0beta7'
    locale: ru
    mongodb_server: 127.0.0.1
    mongodb_port: 27017
    mongodb_user: ''
    mongodb_password: ''
    mongodb_database: ''
    mailer_transport: smtp
    mailer_host: ''
    mailer_port: ''
    mailer_user: ''
    mailer_password: ''
    mailer_encryption: 'ssl'
    mailer_auth_mode: 'login'
    admin_email: ''
    payment_status_number: 1
    payment_status_after_number: 2

services:
    #service_name:
    #    class: AppBundle\Directory\ClassName
    #    arguments: ['@another_service_name', 'plain_value', '%parameter_name%']

    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        tags: ['controller.service_arguments']

    AppBundle\Form\DataTransformer\SettingToStringTransformer:
        public: true
        arguments: ['@doctrine.odm.mongodb.document_manager']

    mongodb_paramconverter:
        class: Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter
        arguments: ['@doctrine_mongodb']
        tags:
            - { name: request.param_converter }

    mongo.connection:
        class: Doctrine\MongoDB\Connection
        factory: ['@doctrine.odm.mongodb.document_manager', getConnection]
        calls:
            - [initialize, []]

    mongo:
        class: Mongo
        factory: ['@mongo.connection', getMongo]

    mongo.database:
        class: MongoDB
        factory: ['@mongo', selectDB]
        arguments: ['%mongodb_database%']

    mongo.cache_collection:
        class: MongoCollection
        arguments: ['@mongo.database', 'cache']

    event_subscribers:
        namespace: AppBundle\EventSubscriber\
        resource: '../../src/AppBundle/EventSubscriber'
        tags: [event_subscriber]
        arguments: [ '@service_container' ]

    AppBundle\EventSubscriber\DoctrineEventSubscriber:
        tags:
            - { name: doctrine_mongodb.odm.event_subscriber, connection: default, lazy: true }
        arguments: [ '@service_container' ]

    AppBundle\EventListener\ExceptionListener:
        public: true
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
        arguments: [ '@twig', '@service_container' ]

    AppBundle\EventListener\KernelEventListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }
        arguments: [ '@service_container' ]

    AppBundle\Twig\AppExtension:
        tags: ['twig.extension']
        arguments: ['@service_container']

    app.twig_runtime:
        class: AppBundle\Twig\AppRuntime
        public: false
        arguments: ['@service_container']
        tags:
            - { name: twig.runtime }

    app.filecache:
        public: true
        class: Symfony\Component\Cache\Simple\FilesystemCache
        arguments:
            - 'app'
            - 86400
            - '%kernel.root_dir%/../var/cache/filecache'

    app.shop_cart:
        class: AppBundle\Service\ShopCartService
        public: true
        arguments: [ '@service_container' ]

    app.settings:
        class: AppBundle\Service\SettingsService
        public: true
        arguments: [ '@service_container' ]

    app.utils:
        class: AppBundle\Service\UtilsService
        public: true
        arguments: [ '@service_container' ]