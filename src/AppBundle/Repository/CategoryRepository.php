<?php

namespace AppBundle\Repository;

use AppBundle\Document\Category;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends BaseRepository
{

    /**
     * @param $parentId
     * @return mixed
     */
    public function getChildCountByParentId($parentId)
    {
        return $this->createQueryBuilder()
            ->field('parent_id')->equals($parentId)
            ->getQuery()
            ->execute()
            ->count();
    }

    /**
     * @param $categoryUri
     * @param bool $pop
     * @return array
     */
    public function getBreadcrumbs($categoryUri, $pop = true)
    {
        if (empty($categoryUri)) {
            return [[],[]];
        }
        $breadcrumbs = [];
        $breadcrumbsIds = [];
        $categoryUri = trim($categoryUri, '/');
        $categoryUriArr = explode('/', $categoryUri);

        $categories = $this->createQueryBuilder()
            ->field('name')->in($categoryUriArr)
            ->sort('title', 'asc')
            ->getQuery()
            ->execute()
            ->toArray(false);

        /** @var Category $crumb */
        $crumb = $this->findOneFromArray($categories, 'parentId', 0);
        if ($crumb) {
            $breadcrumbsIds[] = $crumb->getId();
        }
        while (!empty($crumb)) {
            $breadcrumbs[] = $crumb->getMenuData();
            $crumb = $this->findOneFromArray($categories, 'parentId', $crumb->getId());
            if ($crumb) {
                $breadcrumbsIds[] = $crumb->getId();
            }
        }

        if (!empty($breadcrumbs) && $pop) {
            array_pop($breadcrumbs);
        }

        return [$breadcrumbs, $breadcrumbsIds];
    }

    /**
     * @param array $items
     * @param string $key
     * @param string $value
     * @return null | mixed
     */
    public function findOneFromArray($items, $key, $value)
    {
        $result = null;
        foreach ($items as $item) {
            $method = 'get' . ucfirst($key);
            if (method_exists($item, $method)) {
                $curVal = call_user_func([$item, $method]);
                if ($curVal === $value) {
                    $result = $item;
                    break;
                }
            }
        }
        return $result;
    }

}